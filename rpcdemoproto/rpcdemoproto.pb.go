// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcdemoproto.proto

package rpcdemoproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppendEntriesRequest struct {
	Term                 uint64   `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderId             uint64   `protobuf:"varint,2,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesRequest) Reset()         { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()    {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcdemoproto_b328f7c42f3ccd8c, []int{0}
}
func (m *AppendEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesRequest.Unmarshal(m, b)
}
func (m *AppendEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesRequest.Marshal(b, m, deterministic)
}
func (dst *AppendEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesRequest.Merge(dst, src)
}
func (m *AppendEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesRequest.Size(m)
}
func (m *AppendEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesRequest proto.InternalMessageInfo

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

type AppendEntriesResponse struct {
	Term                 uint64   `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesResponse) Reset()         { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()    {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcdemoproto_b328f7c42f3ccd8c, []int{1}
}
func (m *AppendEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesResponse.Unmarshal(m, b)
}
func (m *AppendEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesResponse.Marshal(b, m, deterministic)
}
func (dst *AppendEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesResponse.Merge(dst, src)
}
func (m *AppendEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesResponse.Size(m)
}
func (m *AppendEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesResponse proto.InternalMessageInfo

func (m *AppendEntriesResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type VoteRequest struct {
	Term                 uint64   `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	CandidateId          uint64   `protobuf:"varint,2,opt,name=candidateId,proto3" json:"candidateId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteRequest) Reset()         { *m = VoteRequest{} }
func (m *VoteRequest) String() string { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()    {}
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcdemoproto_b328f7c42f3ccd8c, []int{2}
}
func (m *VoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteRequest.Unmarshal(m, b)
}
func (m *VoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteRequest.Marshal(b, m, deterministic)
}
func (dst *VoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteRequest.Merge(dst, src)
}
func (m *VoteRequest) XXX_Size() int {
	return xxx_messageInfo_VoteRequest.Size(m)
}
func (m *VoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VoteRequest proto.InternalMessageInfo

func (m *VoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *VoteRequest) GetCandidateId() uint64 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

type VoteResponse struct {
	Term                 uint64   `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	VoteGranted          bool     `protobuf:"varint,2,opt,name=voteGranted,proto3" json:"voteGranted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteResponse) Reset()         { *m = VoteResponse{} }
func (m *VoteResponse) String() string { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()    {}
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcdemoproto_b328f7c42f3ccd8c, []int{3}
}
func (m *VoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteResponse.Unmarshal(m, b)
}
func (m *VoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteResponse.Marshal(b, m, deterministic)
}
func (dst *VoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteResponse.Merge(dst, src)
}
func (m *VoteResponse) XXX_Size() int {
	return xxx_messageInfo_VoteResponse.Size(m)
}
func (m *VoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VoteResponse proto.InternalMessageInfo

func (m *VoteResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *VoteResponse) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

func init() {
	proto.RegisterType((*AppendEntriesRequest)(nil), "rpcdemoproto.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "rpcdemoproto.AppendEntriesResponse")
	proto.RegisterType((*VoteRequest)(nil), "rpcdemoproto.VoteRequest")
	proto.RegisterType((*VoteResponse)(nil), "rpcdemoproto.VoteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeartBeatServiceClient is the client API for HeartBeatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeartBeatServiceClient interface {
	KeepHearBeat(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
}

type heartBeatServiceClient struct {
	cc *grpc.ClientConn
}

func NewHeartBeatServiceClient(cc *grpc.ClientConn) HeartBeatServiceClient {
	return &heartBeatServiceClient{cc}
}

func (c *heartBeatServiceClient) KeepHearBeat(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, "/rpcdemoproto.HeartBeatService/KeepHearBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartBeatServiceServer is the server API for HeartBeatService service.
type HeartBeatServiceServer interface {
	KeepHearBeat(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
}

func RegisterHeartBeatServiceServer(s *grpc.Server, srv HeartBeatServiceServer) {
	s.RegisterService(&_HeartBeatService_serviceDesc, srv)
}

func _HeartBeatService_KeepHearBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartBeatServiceServer).KeepHearBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcdemoproto.HeartBeatService/KeepHearBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartBeatServiceServer).KeepHearBeat(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HeartBeatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcdemoproto.HeartBeatService",
	HandlerType: (*HeartBeatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepHearBeat",
			Handler:    _HeartBeatService_KeepHearBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcdemoproto.proto",
}

// AppendEntriesServiceClient is the client API for AppendEntriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppendEntriesServiceClient interface {
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
}

type appendEntriesServiceClient struct {
	cc *grpc.ClientConn
}

func NewAppendEntriesServiceClient(cc *grpc.ClientConn) AppendEntriesServiceClient {
	return &appendEntriesServiceClient{cc}
}

func (c *appendEntriesServiceClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, "/rpcdemoproto.AppendEntriesService/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppendEntriesServiceServer is the server API for AppendEntriesService service.
type AppendEntriesServiceServer interface {
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
}

func RegisterAppendEntriesServiceServer(s *grpc.Server, srv AppendEntriesServiceServer) {
	s.RegisterService(&_AppendEntriesService_serviceDesc, srv)
}

func _AppendEntriesService_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppendEntriesServiceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcdemoproto.AppendEntriesService/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppendEntriesServiceServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppendEntriesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcdemoproto.AppendEntriesService",
	HandlerType: (*AppendEntriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _AppendEntriesService_AppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcdemoproto.proto",
}

// VoteServiceClient is the client API for VoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VoteServiceClient interface {
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
}

type voteServiceClient struct {
	cc *grpc.ClientConn
}

func NewVoteServiceClient(cc *grpc.ClientConn) VoteServiceClient {
	return &voteServiceClient{cc}
}

func (c *voteServiceClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/rpcdemoproto.VoteService/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteServiceServer is the server API for VoteService service.
type VoteServiceServer interface {
	Vote(context.Context, *VoteRequest) (*VoteResponse, error)
}

func RegisterVoteServiceServer(s *grpc.Server, srv VoteServiceServer) {
	s.RegisterService(&_VoteService_serviceDesc, srv)
}

func _VoteService_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcdemoproto.VoteService/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcdemoproto.VoteService",
	HandlerType: (*VoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _VoteService_Vote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcdemoproto.proto",
}

func init() { proto.RegisterFile("rpcdemoproto.proto", fileDescriptor_rpcdemoproto_b328f7c42f3ccd8c) }

var fileDescriptor_rpcdemoproto_b328f7c42f3ccd8c = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xcb, 0x4b, 0xf4, 0x30,
	0x14, 0xc5, 0x99, 0x8f, 0xf2, 0x39, 0xdc, 0x56, 0x90, 0xa0, 0x50, 0xbb, 0x2a, 0x75, 0xe3, 0x6a,
	0x16, 0xe3, 0xda, 0x85, 0x8f, 0xf1, 0x81, 0xae, 0x2a, 0xa8, 0xdb, 0xd8, 0x9c, 0x45, 0xd1, 0x49,
	0x62, 0x72, 0x67, 0xfe, 0x7e, 0x69, 0x6a, 0x87, 0x76, 0x28, 0x5d, 0xb9, 0x29, 0xbd, 0xbf, 0x24,
	0xe7, 0x1c, 0xce, 0x25, 0xe1, 0x6c, 0xa5, 0xb0, 0x36, 0xd6, 0x19, 0x36, 0x8b, 0xf0, 0x15, 0x49,
	0x9f, 0x15, 0x77, 0x74, 0x7c, 0x65, 0x2d, 0xb4, 0x5a, 0x69, 0x76, 0x35, 0x7c, 0x89, 0xef, 0x0d,
	0x3c, 0x0b, 0x41, 0x11, 0xc3, 0xad, 0xd3, 0x59, 0x3e, 0x3b, 0x8f, 0xca, 0xf0, 0x2f, 0x32, 0x9a,
	0x7f, 0x41, 0x2a, 0xb8, 0x47, 0x95, 0xfe, 0x0b, 0x7c, 0x37, 0x17, 0x2b, 0x3a, 0xd9, 0xd3, 0xf1,
	0xd6, 0x68, 0x8f, 0x51, 0xa1, 0x94, 0x0e, 0xfc, 0xa6, 0xaa, 0xe0, 0x7d, 0xd0, 0x99, 0x97, 0xdd,
	0x58, 0xdc, 0x50, 0xfc, 0x6a, 0x18, 0x53, 0x29, 0x72, 0x8a, 0x2b, 0xa9, 0x55, 0xad, 0x24, 0x63,
	0x17, 0xa4, 0x8f, 0x8a, 0x5b, 0x4a, 0x5a, 0x91, 0x89, 0x08, 0x39, 0xc5, 0x5b, 0xc3, 0xb8, 0x77,
	0x52, 0x33, 0xd4, 0x6f, 0x8c, 0x3e, 0x5a, 0x7e, 0xd2, 0xd1, 0x03, 0xa4, 0xe3, 0x6b, 0x48, 0x7e,
	0x81, 0xdb, 0xd6, 0x15, 0xc4, 0x1b, 0x25, 0x4f, 0x80, 0x6d, 0x78, 0x83, 0x45, 0xb1, 0x18, 0x14,
	0x3c, 0xd6, 0x64, 0x76, 0x36, 0x79, 0xa7, 0x8d, 0xb8, 0xb4, 0x7b, 0x6b, 0xe8, 0x0c, 0xdf, 0xe9,
	0x70, 0xc0, 0xff, 0xce, 0xf1, 0xb9, 0x6d, 0xba, 0x33, 0xba, 0xa4, 0xa8, 0x19, 0xc5, 0xe9, 0xf0,
	0x6d, 0x6f, 0x19, 0x59, 0x36, 0x76, 0xd4, 0xaa, 0x7d, 0xfc, 0x0f, 0xec, 0xe2, 0x27, 0x00, 0x00,
	0xff, 0xff, 0xba, 0x2e, 0x46, 0xc3, 0x71, 0x02, 0x00, 0x00,
}
