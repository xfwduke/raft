#+TITLE: day one
#+AUTHOR: xfwduke
#+OPTIONS: "\n:t"

* 选举
** /state/
*** 概念
节点有 /3/ 种状态
1. ~Follower~
2. ~Candidate~
3. ~Leader~

节点刚启动时，总会处于 /Follower/ 状态。

算上节点属性中和选举有关的 /2/ 个
1. ~currentTerm~ ： 当前任期号，初始值为 /0/ 并单调增加
2. ~votedFor~ ：当前任期收到的选票所代表的 /Candidate/ 的 /CandidateId/

*** 实现

节点的结构为

#+BEGIN_SRC go
type NodeState int

const (
	Follower NodeState = iota
	Candidate
	Leader
)

func (r NodeState) String() string {
	return [...]string{"Follower", "Candidate", "Leader"}[r]
}

type Node struct {
	currentTerm uint64
	votedFor    uint64
	nodeState NodeState
}
#+END_SRC

节点需要在 /3/ 个状态间转换，同时节点初始化状态总是 /Follower/ ，所以还需要加上几个函数
#+BEGIN_SRC go
func (c *Node) Run() {
	c.transToFollower()
}

func (c *Node) transToFollower() {
	c.nodeState = Follower
}
func (c *Node) transToCandidate() {
	c.nodeState = Candidate
}
func (c *Node) transToLeader() {
	c.nodeState = Leader
}
#+END_SRC
这几个函数仅仅是先做个占位，具体的功能逻辑后面逐步再加进来。
** /RPC/
*** 概念
理论上来说， /raft/ 只需要 /2/ 种 /RPC/
1. ~RequestVote RPC~ ：在选举阶段由 /Candidate/ 发起
2. ~AppendEntries RPC~ ：由 /Leader/ 发起，有 /2/ 个应用场景
  1. 复制日志条目
  2. 心跳维持，此时 /RPC Request/ 不包含日志条目信息
*** 实现
现在还不知道怎么实现可用的 /RPC/ 通信，先放着不管。

** /timeout/
*** 概念
/raft/ 有 /2/ 个 /timeout/
1. ~heartbeat timeout~
2. ~election timeout~
两个 /timeout/ 的典型时长都是 /150~300ms/ 的随机值。
**** /heartbeat timeout/
 由 /Leader/ 维持，周期性的向 /Follower/ 发送不带日志条目的 /AppendEntries Request/ 来重置 /Follower/ 的 /election timeout/，用于维持自身的领导地位。
**** /election timeout/
 由 /Follower/ 维持，如果在超时时间内没有收到任何 /RPC Request/ ，会转变为 /Candidate/ 并发起选举。
*** 实现

从上面的描述看， /Leader/ 周期性的广播心跳， /Follower/ 接收心跳信号并来重置自己的 /election timeout/ 。

如果用 /gRPC/ 来实现节点间通信，总是 /Client/ 首先发起通信。所以感觉上应该 /Leader/ 作为 /Client/ 向作为 /Server/ 的各 /Follower/ 发送心跳，但问题是， /Server/ 端没有现成的办法来做无通信超时。

**** /heartbeatdemo/
所以先把问题简化下，实现一个 /Server/ 端的超时的 /demo/ 。
***** 目标
1. 一个带有超时的 /Server/
2. 一个周期性向 /Server/ 发送心跳的 /Client/
3. /Server/ 和 /Client/ 用空的 /Request/ 和 /Response/ 通信
***** /heartbeatdemoproto/
 #+BEGIN_SRC 
 syntax = "proto3";

 package heartbeatdemoproto;

 service HeartBeat {
     rpc KeepHeartBeat(HeartBeatRequest) returns (HeartBeatResponse);
 }

 message HeartBeatRequest {
    
 }

 message HeartBeatResponse {
    
 }
 #+END_SRC
***** /heartbeatdemoserver/
 一个典型的 /gRPC server/ 看起来是这个样子
 #+BEGIN_SRC go
 type DemoServer struct {
 }

 func (ds *DemoServer) KeepHeartBeat(context.Context, *demoproto.HeartBeatRequest) (*demoproto.HeartBeatResponse, error) {
	 panic("implement me")
 }

 func main() {
	 demoServer := DemoServer{}

	 grpcServer := grpc.NewServer()
	 demoproto.RegisterHeartBeatServer(grpcServer, &demoServer)
	 grpcServer.Serve(lis)
 }
 #+END_SRC

 现在就要在这个结构里面加上一个超时来检查有没有在规定的时间内收到 /HearBeatRequest/ 。

 在 /func KeepHeartBeat/ 中是肯定加不了的，因为 /gRPC/ 的 /Server/ 是被动响应，所以必须加在外围。大概的形式应该是这样
 #+BEGIN_SRC go
 func (ds *DemoServer) StartTimeoutLoop() {
	 for {
		 select {
		 case <-time.After(2 * time.Second):
			 fmt.Printf("%s: heartbeat timeout triggered\n", time.Now())
		 }
	 }
 }
 #+END_SRC
 这个函数执行后，会不停的打印产生了超时的消息，还需要有办法在 /func KeepHeartBeat/ 收到心跳后 /reset/ 超时，所以需要增加一个 /channel/ ，并实现相关通知逻辑
 #+BEGIN_SRC go
 type DemoServer struct {
	 hbch chan struct{}
 }

 func (ds *DemoServer) KeepHeartBeat(context.Context, *demoproto.HeartBeatRequest) (*demoproto.HeartBeatResponse, error) {
	 fmt.Printf("%s: heatbeat request received\n", time.Now())
	 ds.hbch <- struct{}{}
	 fmt.Printf("%s: timeout reset signal sent\n", time.Now())
	 return &demoproto.HeartBeatResponse{}, nil
 }

 func (ds *DemoServer) StartTimeoutLoop() {
	 ds.hbch = make(chan struct{})
	 for {
		 select {
		 case <-ds.hbch:
			 fmt.Printf("%s: heartbeat reset\n", time.Now())
		 case <-time.After(2 * time.Second):
			 fmt.Printf("%s: heartbeat timeout triggered\n", time.Now())
		 }
	 }
 }
 #+END_SRC
 现在有了 /2/ 个不会返回的函数调用，分别是 /func StartTimeoutLoop/ 和 /grpcServer.Serve(lis)/ ，决定先启动 /gRPC Serve/ ，所以 /func main/ 的实现是
 #+BEGIN_SRC go
 func main() {
	 demoServer := DemoServer{}
	 grpcServer := grpc.NewServer()
	 demoproto.RegisterHeartBeatServer(grpcServer, &demoServer)

	 go grpcServer.Serve(lis)
	 demoServer.StartTimeoutLoop()
 }
 #+END_SRC
***** /heartbeatdemoclient/
 /client/ 的实现比较简单，为了模拟 /raft/ 中的随机超时时间，特意让 /client/ 在 /1.5~2.5s/ 的随机时间发心跳
 #+BEGIN_SRC go
 func main() {
	 conn, err := grpc.Dial("127.0.0.1:22222", grpc.WithInsecure())
	 if err != nil {
		 panic(err)
	 }

	 client := demoproto.NewHeartBeatClient(conn)

	 ctx, cancel := context.WithCancel(context.Background())
	 defer cancel()

	 for {
		 rand.Seed(time.Now().UnixNano())
		 heartbeat := 1500 + rand.Int31n(1000)
		 _, err := client.KeepHeartBeat(
			 ctx,
			 &demoproto.HeartBeatRequest{})
		 if err != nil {
			 panic(err)
		 }
		 fmt.Printf("%s: heartbeat sent\n", time.Now())
		 select {
		 case <-time.After(time.Duration(heartbeat) * time.Millisecond):
			 break
		 }
	 }
 }
 #+END_SRC

**** /embeddemo/
/heartbeatdemo/ 的 /Server/ 和 /Client/ 实现是分离的，而 /raft/ 的节点会根据 /state/ 的不同在 /Server/ 和 /Client/ 间切换，所以需要把代码整合。
***** 目标
1. 先不实现 /state/ 的在线切换，用命令行参数代替下
2. 继续使用 /heartbeatdemo/ 中定义的 /gRPC proto/
3. 支持多个 /Follower/

***** /heartbeatserver/
 这部分和之前没什么差别
 #+BEGIN_SRC go
 type HeartBeatServer struct {
	 hbch chan struct{}
 }

 func (hb *HeartBeatServer) KeepHeartBeat(context.Context, *demoproto.HeartBeatRequest) (*demoproto.HeartBeatResponse, error) {
	 log.Info("heartbeat request received")
	 hb.hbch <- struct{}{}
	 log.Info("timeout reset signal sent")
	 return &demoproto.HeartBeatResponse{}, nil
 }

 func (hb *HeartBeatServer) StartTimeoutLoop() {
	 for {
		 select {
		 case <-hb.hbch:
			 log.Info("timeout reset")
		 case <-time.After(2 * time.Second):
			 log.Info("timeout triggered")
		 }
	 }
 }
 #+END_SRC
***** /Node/
 新增了 /Node/ 结构，同时包含了 /heartbeatserver/ 和 /clients/
 #+BEGIN_SRC go
 type Node struct {
	 Lis       net.Listener
	 HBServer  *HeartBeatServer
	 HBClients []demoproto.HeartBeatClient
 }

 func NewNode() (*Node, error) {
	 lis, err := net.Listen("tcp", listenURL)

	 return &Node{
		 Lis: lis,
		 HBServer: &HeartBeatServer{
			 hbch: make(chan struct{}),
		 },
	 }, err
 }
 #+END_SRC
 新建的 /Node/ 都会把 /Server/ 需要的端口打开，但并不启动 /heartbeatserver/ 。

***** /send heartbeat/
 把发送心跳的逻辑实现为 /Node/ 的方法
 #+BEGIN_SRC go
 func (nd *Node) StartSendHeartBeat() {
	 var wg sync.WaitGroup
	 for _, cli := range nd.HBClients {
		 wg.Add(1)
		 go func(cli demoproto.HeartBeatClient) {
			 ctx, cancel := context.WithCancel(context.Background())
			 defer cancel()
			 for {
				 rand.Seed(time.Now().UnixNano())
				 hbInterval := 1500 + rand.Int31n(1000)
				 log.Infof("heartbeat interval = %d", hbInterval)
				 _, err := cli.KeepHeartBeat(ctx, &demoproto.HeartBeatRequest{})
				 if err != nil {
					 panic(err)
				 }
				 log.Infof("heartbeat sent to %v", cli)
				 select {
				 case <-time.After(time.Duration(hbInterval) * time.Millisecond):
					 break
				 }
			 }
			 wg.Done()
		 }(cli)
	 }
	 wg.Wait()
 }
 #+END_SRC

 1. 总体的逻辑和之前的 /demoheartbeat/ 并没有什么变化
 2. 多个 /client/ 的心跳广播是并行的
 3. 先临时用 /sync.WaitGroup/ 防止函数返回，以后可能会改掉

***** /cmd command/
 两个函数负责以不同的 /state/ 启动 /Node/
 #+BEGIN_SRC go
 func RunAsFollower(cmd *cobra.Command, args []string) {
	 node, err := NewNode()
	 if err != nil {
		 panic(err)
	 }

	 grpcServer := grpc.NewServer()
	 demoproto.RegisterHeartBeatServer(grpcServer, node.HBServer)
	 go grpcServer.Serve(node.Lis)
	 node.HBServer.StartTimeoutLoop()
 }

 func RunAsLeader(cmd *cobra.Command, args []string) {
	 node, err := NewNode()
	 if err != nil {
		 panic(err)
	 }

	 for _, peerNodeURL := range peerNodeURLs {
		 ctx, _ := context.WithTimeout(context.Background(), 200*time.Millisecond)
		 conn, err := grpc.DialContext(ctx, peerNodeURL, grpc.WithInsecure(), grpc.WithBlock())
		 if err != nil {
			 panic(err)
		 }
		 log.Infof("connect to follower %s success", peerNodeURL)
		 node.HBClients = append(node.HBClients, demoproto.NewHeartBeatClient(conn))
	 }

	 node.StartSendHeartBeat()
 }
 #+END_SRC

 命令行参数的处理由 /cobra/ 负责
 #+BEGIN_SRC go
 var rootCmd = &cobra.Command{}
 var listenURL string
 var peerNodeURLs []string

 func init() {
	 log.SetFormatter(&log.TextFormatter{})
	 log.SetOutput(os.Stdout)

	 rootCmd.PersistentFlags().StringVar(&listenURL, "listen", "", "")
	 rootCmd.PersistentFlags().StringArrayVar(&peerNodeURLs, "peer-nodes", nil, "")
	 rootCmd.AddCommand(&cobra.Command{
		 Use:   "follower",
		 Short: "run as follower",
		 Run:   RunAsFollower,
	 })
	 rootCmd.AddCommand(&cobra.Command{
		 Use:   "leader",
		 Short: "run as leader",
		 Run:   RunAsLeader,
	 })
 }
 #+END_SRC

***** 运行
 #+BEGIN_SRC shell
 embeddemo follower --listen 127.0.0.1:22221 --peer-nodes 127.0.0.1:22220 --peer-nodes 127.0.0.1:22222
 embeddemo follower --listen 127.0.0.1:22222 --peer-nodes 127.0.0.1:22220 --peer-nodes 127.0.0.1:22221
 embeddemo leader --listen 127.0.0.1:22220 --peer-nodes 127.0.0.1:22221 --peer-nodes 127.0.0.1:22222 
 #+END_SRC

 还存在几个问题
 1. 启动参数写起来有点麻烦，这个好改
 2. 必须先启动所有 /follower/ 否则 /leader/ 启动会报错，这个先不管它，后续完善选举逻辑的时候再修复
 3. 运行期间任意一个 /follower/ 退出会导致 /leader/ 退出，也等到以后再说

** ~term~
这个术语在中文的翻译中被翻译成 ~任期~ ，在论文中是这样描述的
#+BEGIN_QUOTE
Raft divides time into /terms/ of arbitray length, as shown in Figure ...

Each term begins with an election, in which one or more candidates attempt to become leader...

If a candidate wins the election, then it serves as leader for the rest of the term.
In some situations an election will result in a split vote. In this case the term will end with no leader; a new term whill begin shortly.
#+END_QUOTE

#+CAPTION: Raft divides time into terms
#+ATTR_HTML: :width 30% :height 30%
[[file:img/Screenshot%20from%202018-09-15%2022-29-57.png]]

图的说明里面由一句话比较关键
#+BEGIN_QUOTE
After a successful election, a single leader manages the cluster until then end of the term.
#+END_QUOTE

上面所有的文件加上图，充分解释了 ~term~ 这个关键概念。但就是这些文字和图，最开始看的时候引起来很大的误解，至少我是误解的一塌糊涂。

*** 任期切换
原文提到， /term/ 是 /raft/ 管理时间的单位，而其长度还是 _*任意*_ 的。这就很误导人了，最初还以为是类似操作系统 /CPU/ 时间片的概念，只是时长是随机的，实际根本不是这样。

这就需要搞清楚一件事情，既然 /raft/ 以 /term/ 作为单位来管理时间，那到底如何划分不同的 /term/。

实际上，只有发生 /election timeout/ 的时候，才会结束当前 /term/ ， 并开始一个新的 /term/ 。同时，由于发生了 /election timeout/ ，必然会发起一个选举流程( ~election~ )，所以才会如原文所说： /Each term begins with a election/ 。

*** 任期长度
原文还提到，/term/ 的长度是任意时长。在搞清楚任期切换后，这个 _*任意*_ 就没那么难以理解了。

1. 在完成一次成功的选举后，集群进入正常的日志复制状态，一直到必须进行一次新的选举
2. 如果选举失败，则过了一小段时间( /election timeout again/ )，又会发起一次新的选举

/term/ 的时长是第一次选举开始到第二次选举开始间的时长，所以说时长是任意的。



